{"version":3,"sources":["App.js","index.js"],"names":["emojiList","flipSound","Audio","matchSound","winSound","App","previewing","setPreviewing","useState","cards","setCards","flipped","setFlipped","disabled","setDisabled","moves","setMoves","time","setTime","gameOver","setGameOver","useEffect","initializeCards","timer","setInterval","prev","clearInterval","shuffled","map","emoji","id","Math","random","matched","sort","setTimeout","React","createElement","className","onClick","card","isFlipped","includes","key","play","newFlipped","length","m","first","second","c","every","handleCardClick","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"0LAGA,MAAMA,EAAY,CAAC,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,gBAEvDC,EAAY,IAAIC,MAAM,oBACtBC,EAAa,IAAID,MAAM,qBACvBE,EAAW,IAAIF,MAAM,mBAyHZG,MAvHf,WACE,MAAOC,EAAYC,GAAiBC,oBAAS,IACtCC,EAAOC,GAAYF,mBAAS,KAC5BG,EAASC,GAAcJ,mBAAS,KAChCK,EAAUC,GAAeN,oBAAS,IAClCO,EAAOC,GAAYR,mBAAS,IAC5BS,EAAMC,GAAWV,mBAAS,IAC1BW,EAAUC,GAAeZ,oBAAS,GAIzCa,oBAAU,KACRC,KACC,IAGHD,oBAAU,KACR,IAAIE,EAIJ,OAHKJ,IACHI,EAAQC,YAAY,IAAMN,EAASO,GAASA,EAAO,GAAI,MAElD,IAAMC,cAAcH,IAC1B,CAACJ,IAEJ,MAAMG,EAAkBA,KACtB,MAAMK,EAAW,IAAI3B,KAAcA,GAChC4B,IAAKC,IAAK,CAAQC,GAAIC,KAAKC,SAAUH,QAAOI,SAAS,KACrDC,KAAK,IAAMH,KAAKC,SAAW,IAE9BtB,EAASiB,GACTf,EAAWe,GACXb,GAAY,GACZE,EAAS,GACTE,EAAQ,GACRE,GAAY,GACZb,GAAc,GAGd4B,WAAW,KACTvB,EAAW,IACXE,GAAY,GACZP,GAAc,IACb,MA0CL,OACE6B,IAAAC,cAAA,OAAKC,UAAU,OACbF,IAAAC,cAAA,UAAI,qBACJD,IAAAC,cAAA,OAAKC,UAAU,cACbF,IAAAC,cAAA,SAAG,UAAQtB,EAAM,YAAUE,EAAK,KAChCmB,IAAAC,cAAA,UAAQE,QAASjB,GAAiB,YAGpCc,IAAAC,cAAA,OAAKC,UAAU,QACZ7B,EAAMmB,IAAKY,IACV,MAAMC,EAAY9B,EAAQ+B,SAASF,IAASA,EAAKP,QACjD,OACEG,IAAAC,cAAA,OACEM,IAAKH,EAAKV,GACVQ,kBAAmBG,EAAY,UAAY,KAC3CF,QAASA,IAtDIC,KACvB,GAAI3B,GAAYP,GAAcK,EAAQ+B,SAASF,IAASA,EAAKP,QAAS,OAEtEhC,EAAU2C,OACV,MAAMC,EAAa,IAAIlC,EAAS6B,GAChC5B,EAAWiC,GAEe,IAAtBA,EAAWC,SACbhC,GAAY,GACZE,EAAU+B,GAAMA,EAAI,GAEpBZ,WAAW,KACT,MAAOa,EAAOC,GAAUJ,EAEpBG,EAAMnB,QAAUoB,EAAOpB,QACzB1B,EAAWyC,OACXlC,EAAUe,GACRA,EAAKG,IAAKsB,GACRA,EAAErB,QAAUmB,EAAMnB,MAAQ,IAAKqB,EAAGjB,SAAS,GAASiB,IAIrCzC,EAAM0C,MACtBD,GACCA,EAAErB,QAAUmB,EAAMnB,OAAeqB,EAAEjB,WAIrCb,GAAY,GACZhB,EAASwC,SAIbhC,EAAW,IACXE,GAAY,IACX,OAmBoBsC,CAAgBZ,IAE9BC,EAAYD,EAAKX,MAAQ,QAMjCV,GACCiB,IAAAC,cAAA,OAAKC,UAAU,SACbF,IAAAC,cAAA,UAAI,yBACJD,IAAAC,cAAA,SAAG,UAAQtB,GACXqB,IAAAC,cAAA,SAAG,SAAOpB,EAAK,YACfmB,IAAAC,cAAA,UAAQE,QAASjB,GAAiB,iBCpH/B+B,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHrB,IAAAC,cAACD,IAAMsB,WAAU,KACftB,IAAAC,cAAChC,EAAG","file":"static/js/main.eccecc7a.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\n\nconst emojiList = ['🍕', '🎮', '🐶', '🚀', '🌈', '🎵', '🧠', '🏀'];\n\nconst flipSound = new Audio('/sounds/flip.mp3');\nconst matchSound = new Audio('/sounds/match.mp3');\nconst winSound = new Audio('/sounds/win.mp3');\n\nfunction App() {\n  const [previewing, setPreviewing] = useState(true);\n  const [cards, setCards] = useState([]);\n  const [flipped, setFlipped] = useState([]);\n  const [disabled, setDisabled] = useState(false);\n  const [moves, setMoves] = useState(0);\n  const [time, setTime] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  \n\n  // Shuffle cards on first render\n  useEffect(() => {\n    initializeCards();\n  }, []);\n\n  // Start timer\n  useEffect(() => {\n    let timer;\n    if (!gameOver) {\n      timer = setInterval(() => setTime((prev) => prev + 1), 1000);\n    }\n    return () => clearInterval(timer);\n  }, [gameOver]);\n\n  const initializeCards = () => {\n    const shuffled = [...emojiList, ...emojiList]\n      .map((emoji) => ({ id: Math.random(), emoji, matched: false }))\n      .sort(() => Math.random() - 0.5);\n  \n    setCards(shuffled);\n    setFlipped(shuffled); // show all cards\n    setDisabled(true);\n    setMoves(0);\n    setTime(0);\n    setGameOver(false);\n    setPreviewing(true);\n  \n    // Hide all after 3 seconds\n    setTimeout(() => {\n      setFlipped([]);\n      setDisabled(false);\n      setPreviewing(false);\n    }, 3000);\n  };\n\n  const handleCardClick = (card) => {\n    if (disabled || previewing || flipped.includes(card) || card.matched) return;\n\n    flipSound.play();\n    const newFlipped = [...flipped, card];\n    setFlipped(newFlipped);\n\n    if (newFlipped.length === 2) {\n      setDisabled(true);\n      setMoves((m) => m + 1);\n\n      setTimeout(() => {\n        const [first, second] = newFlipped;\n\n        if (first.emoji === second.emoji) {\n          matchSound.play();\n          setCards((prev) =>\n            prev.map((c) =>\n              c.emoji === first.emoji ? { ...c, matched: true } : c\n            )\n          );\n\n          const allMatched = cards.every(\n            (c) =>\n              c.emoji === first.emoji ? true : c.matched\n          );\n\n          if (allMatched) {\n            setGameOver(true);\n            winSound.play();\n          }\n        }\n\n        setFlipped([]);\n        setDisabled(false);\n      }, 1000);\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      <h1>Memory Match Game</h1>\n      <div className=\"status-bar\">\n        <p>Moves: {moves} | Time: {time}s</p>\n        <button onClick={initializeCards}>Restart</button>\n      </div>\n\n      <div className=\"grid\">\n        {cards.map((card) => {\n          const isFlipped = flipped.includes(card) || card.matched;\n          return (\n            <div\n              key={card.id}\n              className={`card ${isFlipped ? 'flipped' : ''}`}\n              onClick={() => handleCardClick(card)}\n            >\n              {isFlipped ? card.emoji : \"?\"}\n            </div>\n          );\n        })}\n      </div>\n\n      {gameOver && (\n        <div className=\"popup\">\n          <h2>🎉 You Win!</h2>\n          <p>Moves: {moves}</p>\n          <p>Time: {time} seconds</p>\n          <button onClick={initializeCards}>Play Again</button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);"],"sourceRoot":""}